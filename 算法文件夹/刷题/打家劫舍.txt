题目描述：
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

### 解题思路
1.构造一个数组：int dp[size];
他的含义是记录第i个位置的最优解
2.不难发现动规转移方程应该写成：dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
含义是：第i-1位置的最大值、i-2位置的最大值+i位置上的值————这两个值中取一个较大者

最终答案显然就是在 dp[size-1]的位置上
3.有了动归方程就能够轻松的书写代码了。

代码如下，注释打满方便阅读！

### 代码

```cpp
class Solution {
public:
    int rob(vector<int>& nums) {
        int size = nums.size();//获取数组的长度
        if(size==1) return nums[0];//如果数组仅仅只有一个数字没有必要再进行下面的操作
        int dp[size];//定义一个动态规划数组（为了方便理解定义了数组，实际上是可以压缩成两个变量的）
        dp[0]=nums[0];
        dp[1]=max(dp[0],nums[1]);//对dp的前两个位置进行初始化
        for(int i=2;i<size;i++){
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }//这里就是对数组的整体构造
        return dp[size-1];//返回答案
    }
};
```
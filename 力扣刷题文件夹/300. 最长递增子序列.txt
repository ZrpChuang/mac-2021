300. 最长递增子序列
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。

子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

解题思路

首先定义dp数组的含义，其实个人感觉这一步最巧妙想到了，问题就迎刃而解了
1.dp数组的含义是包含nums[i]数字在内的最长子序列。
2.确定最优解在哪：显然这题最优解的位置是在dp数组中最大的一个

3.然后就是关于这个dp动态转移方程了：
dp[i]=满足能够衔接条件的最大者，如果没有就是1(即它本身)
for(int j=0;j<i;j++){
if(nums[i]>nums[j]&&dp[j]+1>dp[i]){
dp[i]=dp[j]+1;
}
}
//遍历一遍子问题的所有解，判断是否符合符合条件，在符合条件的前提之下，用类似贪心的思想去更新最解！

代码如下：
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int size=nums.size();//获取长度
        int dp[size];//表示到i为止的最大上升序列的长度
        dp[0]=1;
        int max=1;      
        for(int i=1;i<size;i++){
            dp[i]=1;//初始值是1
            for(int j=0;j<i;j++){
                if(nums[i]>nums[j]&&dp[j]+1>dp[i]){
                    dp[i]=dp[j]+1;
                }
            }
            if(dp[i]>max) max=dp[i];
        }
        return max;
    }
};
